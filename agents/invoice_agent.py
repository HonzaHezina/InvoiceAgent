import json
import requests
from tools.ocr_tool import extract_text_from_invoice, repair_json_if_invalid
from tools.invoice_model import InvoiceDocument

class InvoiceReaderAgent:
    PROMPT = """
Jsi specializovan√Ω AI agent, kter√Ω extrahuje data z naskenovan√Ωch faktur a √∫ƒçtenek. Vstupem je obr√°zek faktury nebo √∫ƒçtenky. Tv√Ωm √∫kolem je:

1. Rozpoznat ve≈°ker√© kl√≠ƒçov√© informace.
2. Vr√°tit v√Ωstup jako platn√Ω JSON objekt podle n√≠≈æe uveden√©ho vzoru.
3. Pokud nƒõkter√© pole v dokumentu chyb√≠, nahraƒè jej `null` nebo jej vynech.
4. Nep≈ôid√°vej ≈æ√°dn√© koment√°≈ôe nebo text mimo JSON v√Ωstup.

üìÑ JSON struktura, kterou m√°≈° vr√°tit (vypl≈à hodnoty podle faktury na obr√°zku):

{
  "DocumentType": 1,
  "ID": "<ƒç√≠slo faktury nebo dokladu>",
  "IssuingSystem": "scan",
  "IssueDate": "<datum vystaven√≠>",
  "TaxPointDate": "<datum zdaniteln√©ho plnƒõn√≠>",
  "VATApplicable": true,
  "AccountingSupplierParty": {
    "Party": {
      "PartyIdentification": { "ID": "<Iƒå dodavatele>" },
      "PartyName": { "Name": "<n√°zev dodavatele>" },
      "PostalAddress": {
        "StreetName": "<ulice>",
        "BuildingNumber": "<ƒç√≠slo>",
        "CityName": "<mƒõsto>",
        "PostalZone": "<PSƒå>",
        "Country": { "IdentificationCode": "CZ", "Name": "" }
      },
      "PartyTaxScheme": {
        "CompanyID": "<DIƒå dodavatele>",
        "TaxScheme": "VAT"
      },
      "Contact": {
        "Telephone": "<telefon dodavatele>",
        "ElectronicMail": "<e-mail dodavatele>"
      }
    }
  },
  "AccountingCustomerParty": {
    "Party": {
      "PartyIdentification": { "ID": "<Iƒå odbƒõratele>" },
      "PartyName": { "Name": "<n√°zev odbƒõratele>" },
      "PostalAddress": {
        "StreetName": "<ulice>",
        "BuildingNumber": "<ƒç√≠slo>",
        "CityName": "<mƒõsto>",
        "PostalZone": "<PSƒå>",
        "Country": { "IdentificationCode": "CZ", "Name": "" }
      },
      "PartyTaxScheme": {
        "CompanyID": "<DIƒå odbƒõratele>",
        "TaxScheme": "VAT"
      },
      "Contact": {
        "Telephone": "<telefon odbƒõratele>",
        "ElectronicMail": "<e-mail odbƒõratele>"
      }
    }
  },
  "InvoiceLines": {
    "InvoiceLine": [
      {
        "ID": "<ƒç√≠slo polo≈æky>",
        "InvoicedQuantity": <mno≈æstv√≠>,
        "LineExtensionAmount": <ƒç√°stka bez DPH>,
        "LineExtensionAmountTaxInclusive": <ƒç√°stka s DPH>,
        "LineExtensionTaxAmount": <DPH>,
        "UnitPrice": <jednotkov√° cena bez DPH>,
        "UnitPriceTaxInclusive": <jednotkov√° cena s DPH>,
        "ClassifiedTaxCategory": {
          "Percent": <sazba DPH>,
          "VATCalculationMethod": 0,
          "VATApplicable": true
        },
        "Item": { "Description": "<popis polo≈æky>" }
      }
    ]
  },
  "TaxTotal": {
    "TaxSubTotal": {
      "TaxableAmount": <z√°klad DPH>,
      "TaxAmount": <ƒç√°stka DPH>,
      "TaxInclusiveAmount": <celkem s DPH>,
      "TaxCategory": {
        "Percent": <sazba DPH>,
        "VATApplicable": true
      }
    },
    "TaxAmount": <ƒç√°stka DPH>
  },
  "LegalMonetaryTotal": {
    "TaxExclusiveAmount": <celkem bez DPH>,
    "TaxInclusiveAmount": <celkem s DPH>,
    "PayableAmount": <k √∫hradƒõ>
  },
  "PaymentMeans": {
    "Payment": {
      "PaidAmount": <zaplatit>,
      "PaymentMeansCode": 42,
      "Details": {
        "PaymentDueDate": "<datum splatnosti>",
        "ID": "<ƒç√≠slo √∫ƒçtu nebo referenƒçn√≠ ƒç√≠slo>",
        "BankCode": "<k√≥d banky>",
        "VariableSymbol": <VS>
      }
    }
  }
}

Vra≈• pouze JSON odpovƒõƒè ‚Äì bez √∫vodu, bez koment√°≈ô≈Ø, bez vysvƒõtlen√≠.
"""

    def run(self, image_path):
        print(f"[Agent] Spou≈°t√≠m OCR na {image_path}")
        raw_result = extract_text_from_invoice(image_path, self.PROMPT)

        try:
            parsed_json = json.loads(raw_result)
        except json.JSONDecodeError:
            print("[Agent] JSON nevalidn√≠, pokus√≠m se opravit...")
            raw_result = repair_json_if_invalid(raw_result)
            parsed_json = json.loads(raw_result)

        try:
            invoice = InvoiceDocument(**parsed_json)
            print("[Agent] JSON validov√°n.")
        except Exception as e:
            print("[Agent] Chyba validace JSON:", e)
            raise

        # Posl√°n√≠ p≈ôes API (dummy endpoint)
        try:
            response = requests.post("https://httpbin.org/post", json=parsed_json)
            print("[Agent] JSON odesl√°n p≈ôes API. Stav:", response.status_code)
        except Exception as e:
            print("[Agent] Chyba p≈ôi odes√≠l√°n√≠ JSON:", e)

        return parsed_json
