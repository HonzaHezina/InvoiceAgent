import json
import requests
from tools.ocr_tool import extract_text_from_invoice, repair_json_if_invalid
from tools.invoice_model import InvoiceDocument

class InvoiceReaderAgent:
    PROMPT = """
Jsi specializovan√Ω AI agent, kter√Ω extrahuje data z naskenovan√Ωch faktur a √∫ƒçtenek. Vstupem je obr√°zek faktury nebo √∫ƒçtenky. Tv√Ωm √∫kolem je:

1. Rozpoznat ve≈°ker√© kl√≠ƒçov√© informace.
2. Vr√°tit v√Ωstup jako platn√Ω JSON objekt podle n√≠≈æe uveden√©ho vzoru.
3. Pokud nƒõkter√© pole v dokumentu chyb√≠, nahraƒè jej `null` nebo jej vynech.
4. Nep≈ôid√°vej ≈æ√°dn√© koment√°≈ôe nebo text mimo JSON v√Ωstup.

üìÑ JSON struktura, kterou m√°≈° vr√°tit (vypl≈à hodnoty podle faktury na obr√°zku):
<ZKR√ÅCENO ‚Äì prompt pokraƒçuje jako JSON ≈°ablona uveden√° v p≈ôedchoz√≠m kroku>
"""

    def run(self, image_path):
        print(f"[Agent] Spou≈°t√≠m OCR na {image_path}")
        raw_result = extract_text_from_invoice(image_path, self.PROMPT)

        try:
            parsed_json = json.loads(raw_result)
        except json.JSONDecodeError:
            print("[Agent] JSON nevalidn√≠, pokus√≠m se opravit...")
            raw_result = repair_json_if_invalid(raw_result)
            parsed_json = json.loads(raw_result)

        try:
            invoice = InvoiceDocument(**parsed_json)
            print("[Agent] JSON validov√°n.")
        except Exception as e:
            print("[Agent] Chyba validace JSON:", e)
            raise

        # Posl√°n√≠ p≈ôes API (dummy endpoint)
        try:
            response = requests.post("https://httpbin.org/post", json=parsed_json)
            print("[Agent] JSON odesl√°n p≈ôes API. Stav:", response.status_code)
        except Exception as e:
            print("[Agent] Chyba p≈ôi odes√≠l√°n√≠ JSON:", e)

        return parsed_json